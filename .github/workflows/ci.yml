name: CI - Build and Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build-type: [release, debug]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up build environment
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential gcc make zsh
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install gcc make zsh
          fi
        shell: bash
      
      - name: Build Release Version
        if: matrix.build-type == 'release'
        run: |
          make clean
          make
          ls -lah autocomplete
        
      - name: Build Debug Version
        if: matrix.build-type == 'debug'
        run: |
          make clean
          make debug
          ls -lah autocomplete
      
      - name: Run Basic Tests
        run: |
          make test
        continue-on-error: false
      
      - name: Run Comprehensive Tests
        run: |
          chmod +x tests/simple_test.sh
          ./tests/simple_test.sh
        continue-on-error: false
      
      - name: Check for Memory Leaks (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y valgrind
          echo -e "git status\ngit commit\nls -la" | valgrind --leak-check=full --error-exitcode=1 ./autocomplete ghost "git"
        continue-on-error: true
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autocomplete-${{ matrix.os }}-${{ matrix.build-type }}
          path: autocomplete
          retention-days: 7
      
      - name: Generate Build Report
        if: always()
        run: |
          echo "## Build Report" >> $GITHUB_STEP_SUMMARY
          echo "- OS: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ matrix.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ -f autocomplete ]; then
            echo "- Binary Size: $(du -h autocomplete | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc gcov lcov
      
      - name: Build with coverage
        run: |
          gcc -O0 -g --coverage -Iinclude -o autocomplete src/autocomplete.c src/trie.c
      
      - name: Run tests
        run: |
          make test || true
      
      - name: Generate coverage report
        run: |
          lcov --capture --directory . --output-file coverage.info || true
          lcov --remove coverage.info '/usr/*' --output-file coverage.info || true
          lcov --list coverage.info || true
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v4
        with:
          languages: cpp
      
      - name: Build for CodeQL
        run: |
          make clean
          make
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
